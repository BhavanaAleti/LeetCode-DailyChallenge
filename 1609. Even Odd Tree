# https://leetcode.com/problems/even-odd-tree/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isEvenOddTree(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        if(root == null) return true;
        queue.offer(root);
        int level = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            int min = 0;
            int max = Integer.MAX_VALUE;
            for(int i=0; i< size;i++){
                TreeNode node = queue.poll();
                if(level %2 ==0){
                    if(node.val <= min || node.val %2 == 0) return false; //if value is less than previous or number is even number - for even layer
                    else{
                        min = node.val;
                    }
                }
                if(level %2 ==1){
                    if(node.val >= max || node.val %2 == 1) return false; // if value is greater than previous or number is odd number - for odd layer
                    else{
                        max = node.val;
                    }
                }
                
                if(node.left != null) queue.offer(node.left);
                if(node.right != null) queue.offer(node.right);
            }                
           level++; 
        }
        return true;
    }
}
